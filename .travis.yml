language: cpp
sudo: false

cache:
  apt: true
  directories:
    - $HOME/.cache/cuda
    - $HOME/.cache/cmake
    - $HOME/.cache/boost

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.9
      - libboost-test-dev
      - libopenmpi-dev
      - libhdf5-serial-dev

env:
  global:
    - CUDA_ROOT: $HOME/.cache/cuda
    - CMAKE_ROOT: $HOME/.cache/cmake
    - BOOST_ROOT: $HOME/.cache/boost
    - BOOST_MIN: 106000 # careful: hard coded below
  matrix:
    - COMPILER=nvcc

before_install:
  - if [ "$COMPILER" == "nvcc" ]; then
        echo "Using CUDA 7.5 ...";
        export CXX=g++-4.9;
        export CC=gcc-4.9;
        export PATH=$CUDA_ROOT/bin:$PATH;
    fi
  - echo "$CXX $CC"
  - $CXX --version
  - $CC --version
  
install:
  #############################################################################
  # CMAKE                                                                     #
  #############################################################################
  - export PATH=$CMAKE_ROOT/bin:$PATH
  - CMAKE_33_FOUND=$(cmake --version | grep " 3\.3\." >/dev/null && { echo 0; } || { echo 1; })
  - if [ $CMAKE_33_FOUND -ne 0 ]; then
      mkdir -p $CMAKE_ROOT &&
      cd $CMAKE_ROOT &&
      travis_retry wget --no-check-certificate http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz &&
      tar -xzf cmake-3.3.2-Linux-x86_64.tar.gz &&
      mv cmake-3.3.2-Linux-x86_64/* . &&
      rm -rf cmake-3.3.2-Linux-x86_64.tar.gz cmake-3.3.2-Linux-x86_64 &&
      cd -;
    fi
  - cmake --version
  
  #############################################################################
  # BOOST                                                                     #
  #############################################################################
  - export CMAKE_PREFIX_PATH=$BOOST_ROOT:$CMAKE_PREFIX_PATH
  # cmake --find-package -DNAME=Boost -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST
  - echo -e "#include <boost/version.hpp>\n#include <iostream>\nint main() { std::cout << BOOST_VERSION << std::endl; return 0; }"
        | $CXX -I$BOOST_ROOT/include -x c++ - >/dev/null || { echo 0; }
  - ls $BOOST_ROOT
  - BOOST_FOUND=$([ $(./a.out) -ge $BOOST_MIN ] && { echo 0; } || { echo 1; })
  - if [ $BOOST_FOUND -ne 0 ]; then
      mkdir -p $ BOOST_ROOT &&
      cd $BOOST_ROOT &&
      travis_retry wget --no-check-certificate -O boost.tar.bz2 http://sourceforge.net/projects/boost/files/boost/1.60.0/boost_1_60_0.tar.bz2/download &&
      tar -xjf boost.tar.bz2 &&
      cd boost_1_60_0 &&
      ./bootstrap.sh --with-libraries=test --prefix=$BOOST_ROOT &&
      ./b2 -j2 &&
      ./b2 install &&
      rm -rf boost.tar.bz2 boost_1_60_0 &&
      cd $HOME;
    fi
  
  #############################################################################
  # CUDA                                                                      #
  #############################################################################
  - NVCC_FOUND=$(which nvcc >/dev/null && { echo 0; } || { echo 1; })
  - if [ $NVCC_FOUND -ne 0 ] && [ $COMPILER == "nvcc" ]; then
      mkdir -p $CUDA_ROOT &&
      cd $CUDA_ROOT &&
      travis_retry wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run &&
      chmod u+x *.run &&
      ./cuda_7.5.18_linux.run --silent --verbose --toolkit --toolkitpath=$CUDA_ROOT &&
      rm -rf cuda_7.5.18_linux.run $CUDA_ROOT/{samples,jre,doc,share} &&
      cd -;
    fi
  - which nvcc

script:
  - ls -l
  - mkdir -p $HOME/build && cd $HOME/build
  - CXXFLAGS="-Werror $CXXFLAGS" cmake $TRAVIS_BUILD_DIR/
  - make check_all VERBOSE=1
